name: Unit Tests

on:
  workflow_call:
    secrets:
      BITBUCKET_READ_ONLY_SSH_KEY:
        required: true
      SONAR_TOKEN:
        required: true

permissions:
  contents: read
  # To allow SonarCloud to post to PR.
  pull-requests: write

jobs:
  phpunit:
    name: PHP
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.repository != 'penske-media-corp/github-workflows-wordpress' }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - php: '7.4'
            wordpress: 'latest'
            check_code_coverage: true
            continue_on_error: false
#          - php: '7.4'
#            wordpress: 'nightly'
#            check_code_coverage: false
#            continue_on_error: true
#          - php: '8.0'
#            wordpress: 'latest'
#            check_code_coverage: false
#            continue_on_error: true
#          - php: '8.0'
#            wordpress: 'nightly'
#            check_code_coverage: false
#            continue_on_error: true

    steps:
      - name: Prepare environment
        uses: penske-media-corp/github-action-wordpress-test-setup@add/action
        with:
          git_checkout_fetch_depth: 0
          php_version: ${{ matrix.php }}
          phpunit: 1
          ssh_key_encoded: "${{ secrets.BITBUCKET_READ_ONLY_SSH_KEY }}"

      - name: Set environment variables
        run: |
          . pmc-functions
          
          echo "TMPDIR=${RUNNER_TEMP}" >> $GITHUB_ENV
          echo "WP_CORE_DIR=${RUNNER_TEMP}/wp/core" >> $GITHUB_ENV
          echo "WP_TESTS_DIR=${RUNNER_TEMP}/wp/tests-lib" >> $GITHUB_ENV

          if [[ -z "${PMC_IS_PMC_PLUGINS}" ]]; then
            echo "PMC_PHPUNIT_BOOTSTRAP=${RUNNER_TEMP}/wp/core/wp-content/plugins/pmc-plugins/pmc-unit-test/bootstrap.php" >> $GITHUB_ENV
          else
            echo "PMC_PHPUNIT_BOOTSTRAP=${GITHUB_WORKSPACE}/pmc-unit-test/bootstrap.php" >> $GITHUB_ENV
          fi
          
          if [[ "branch" == "${GITHUB_REF_TYPE}" && "$(pmc_get_git_default_branch)" == ${GITHUB_REF_NAME} ]]; then
            echo "PMC_PHPUNIT_MATCH_BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "PMC_PHPUNIT_MATCH_BRANCH=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Start MySQL
        run: |
          sudo systemctl start mysql.service
          mysql --user=root --password=root --host=127.0.0.1 --protocol=tcp '--execute=CREATE DATABASE IF NOT EXISTS wordpress;'

      - name: Set version cache key and cache path
        id: set-cache-info
        run: |
          echo "::set-output name=path::${TMPDIR}/wp"
          
          if [[ "${{ matrix.wordpress }}" == 'latest' ]]; then
            echo "::set-output name=version::$(curl https://api.wordpress.org/core/version-check/1.7/ | jq -r '.offers[0].version')"
          else
            echo "::set-output name=version::$(/bin/date -u "+%F")"
          fi
        shell: bash

      - name: Cache WordPress install
        id: cache-wordpress-install
        uses: actions/cache@v3
        with:
          path: ${{ steps.set-cache-info.outputs.path }}
          key: ${{ runner.os }}-version-${{ steps.set-cache-info.outputs.version }}-php-${{ matrix.php }}-wp-${{ matrix.wordpress }}-wordpress-install

      - name: Install WordPress
        if: ${{ steps.cache-wordpress-install.outputs.cache-hit != 'true' }}
        run: |
          SCRIPT_PATH="/usr/local/bin/install-wp-tests"
          curl -o "${SCRIPT_PATH}" https://raw.githubusercontent.com/wp-cli/scaffold-command/master/templates/install-wp-tests.sh
          chmod +x "${SCRIPT_PATH}"
          yes | "${SCRIPT_PATH}" wordpress root root 127.0.0.1 ${{ matrix.wordpress }}

      - name: Set up WordPress
        run: |
          # TODO: confirm need.
          . pipeline-functions

          WEB_ROOT="${WP_CORE_DIR}"
          WP_CONTENT_TARGET_DIR="${WP_CORE_DIR}/wp-content"

          # Install client-mu-plugins.
          if [[ ! -d "${WP_CONTENT_TARGET_DIR}/client-mu-plugins" ]]; then
            mkdir "${WP_CONTENT_TARGET_DIR}/client-mu-plugins"
          fi
          mv "${RUNNER_TEMP}/plugin-loader.php" "${WP_CONTENT_TARGET_DIR}/client-mu-plugins/plugin-loader.php"

          # Install VIP Go's mu-plugins.
          if [[ -d "${WP_CONTENT_TARGET_DIR}/mu-plugins" ]]; then
            git -C "${WP_CONTENT_TARGET_DIR}/mu-plugins" pull
          else
            git clone --depth 1 https://github.com/Automattic/vip-go-mu-plugins-built.git "${WP_CONTENT_TARGET_DIR}/mu-plugins"
          fi

          # Install pmc-vip-go-plugins.
          if [[ -f "${WP_CONTENT_TARGET_DIR}/plugins/README.md" ]]; then
            git -C "${WP_CONTENT_TARGET_DIR}/plugins" pull
          else
            rm -rf "${WP_CONTENT_TARGET_DIR}/plugins"
            git clone --depth 1 git@bitbucket.org:penskemediacorp/pmc-vip-go-plugins.git "${WP_CONTENT_TARGET_DIR}/plugins"
          fi

          # TODO: install dependencies, using helper to check out expected versions
          # TODO: use maybe_switch_branch_for_testing_theme and checkout_dependencies
          # Install pmc-plugins if not testing pmc-plugins.
          if [[ -z "${PMC_IS_PMC_PLUGINS}" ]]; then
            WP_THEME_FOLDER="${WP_CONTENT_TARGET_DIR}/themes"
          
            if [[ -d "${WP_CONTENT_TARGET_DIR}/plugins/pmc-plugins" ]]; then
              git -C "${WP_CONTENT_TARGET_DIR}/plugins/pmc-plugins" pull
            else
              # TODO: replace with GH URL once key is sorted.
              git clone --depth 1 git@bitbucket.org:penskemediacorp/pmc-plugins.git "${WP_CONTENT_TARGET_DIR}/plugins/pmc-plugins"
            fi

            # TODO: parent theme, if applicable.
            PARENT_THEME_SLUG="$(get_parent_wp_theme . true)"
            if [[ -n "${PARENT_THEME_SLUG}" ]]; then
              REPO_SLUG="${PARENT_THEME_SLUG#vip\/}"
              echo $REPO_SLUG 
              git clone --depth 1 "git@bitbucket.org:penskemediacorp/${REPO_SLUG}.git" "${WP_THEME_FOLDER}/${PARENT_THEME_SLUG}"
            fi

            maybe_switch_branch_for_testing_theme . "${BITBUCKET_BRANCH}"
          
            exit 123
          fi

      - name: Run PHPUnit
        continue-on-error: ${{ matrix.continue_on_error }}
        run: |
          . pmc-manifest

          export PMC_ARTIFACTS=true
          
          # TODO: second run like we do in Bitbucket?
          . pmc-test-phpunit

      - name: Ensure version-controlled files are not modified during the tests
        run: git diff --exit-code

      - name: Capture coverage reports
        id: capture-coverage-reports
        uses: actions/upload-artifact@v3
        if: ${{ matrix.check_code_coverage }}
        with:
          name: phpunit-coverage
          path: ${{ github.workspace }}/artifacts/*.xml
          if-no-files-found: error

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: phpunit

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis.
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || '' }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: phpunit-coverage
          path: ${{ github.workspace }}/artifacts

      - name: Fix paths in coverage reports
        run: |
          # https://docs.sonarcloud.io/enriching/test-coverage/php-test-coverage/
          for REPORT in ./artifacts/coverage-*.xml; do
            sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' "$REPORT"
          done

      - name: Set Sonar variables
        run: |
          if [[ -d ./artifacts ]]; then
            ls -l ./artifacts

            echo "sonar.php.coverage.reportPaths=$(find ./artifacts -type f -name '*.xml' | tr '\n', ',' | sed 's/,$//g')" >> "./sonar-project.properties"

            cat ./sonar-project.properties
          else
            ls -l .
            exit 1
          fi

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          # Token needed to get PR information, if any
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
