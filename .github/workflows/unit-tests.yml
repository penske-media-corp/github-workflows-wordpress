name: Unit Tests

on:
  workflow_call:
    secrets:
      BITBUCKET_READ_ONLY_SSH_KEY:
        required: true


# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  phpunit:
    name: PHPUnit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event_name == 'pull_request' }} && ${{ github.repository != 'penske-media-corp/github-workflows-wordpress' }}

    services:
      mysql:
        image: mysql:latest
        ports:
          - "3306:3306"
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress

    strategy:
      fail-fast: false
      matrix:
        include:
          - php: '7.4'
            wordpress: 'latest'
            continue_on_error: false
          - php: '7.4'
            wordpress: 'nightly'
            continue_on_error: true
          - php: '8.0'
            wordpress: 'latest'
            continue_on_error: true
          - php: '8.0'
            wordpress: 'nightly'
            continue_on_error: true

    steps:
      - name: Set environment variables
        run: |
          echo 'TMPDIR=/tmp' >> $GITHUB_ENV
          echo 'WP_CORE_DIR=/tmp/wp' >> $GITHUB_ENV
          echo 'WP_TESTS_DIR=/tmp/wp-tests-lib' >> $GITHUB_ENV
          # TODO: condition this on whether or not we're testing `pmc-plugins`.
          echo "PMC_PHPUNIT_BOOTSTRAP=${WP_CORE_DIR}/wp-content/plugins/pmc-plugins/pmc-unit-test/bootstrap.php" >> $GITHUB_ENV
        shell: bash

      - name: Prepare environment
        uses: penske-media-corp/github-action-wordpress-test-setup@add/action
        with:
          git_checkout_fetch_depth: 0
          php_version: ${{ matrix.php }}
          phpunit: 1
          ssh_key_encoded: "${{ secrets.BITBUCKET_READ_ONLY_SSH_KEY }}"

      # TODO: cache composer install.

      - name: Install PHPUnit
        run: |
          if [[ $(php -v) =~ "PHP 8." ]]; then
            composer global require "phpunit/phpunit=9.*"
          elif [[ $(php -v) =~ "PHP 7." ]]; then
            composer global require "phpunit/phpunit=6.1.*"
          fi
    
          composer global require yoast/phpunit-polyfills

        # TODO: cache this using version number.
      - name: Install WordPress
        run: |
          SCRIPT_PATH="/usr/local/bin/install-wp-tests"
          curl -o "${SCRIPT_PATH}" https://raw.githubusercontent.com/wp-cli/scaffold-command/master/templates/install-wp-tests.sh
          chmod +x "${SCRIPT_PATH}"
          # TODO: set WP paths?
          # TODO: symlink or rsync plugins etc.
          # TODO: client-mu-plugins loader.
          yes | "${SCRIPT_PATH}" wordpress root root 127.0.0.1 ${{ matrix.wordpress }}

      - name: Link Core Tech
        run: |
          WP_CONTENT_SOURCE_DIR="${GITHUB_WORKSPACE}/.cache/www/html/wp-content"
          WP_CONTENT_TARGET_DIR="${WP_CORE_DIR}/wp-content"
          ln -s "${WP_CONTENT_SOURCE_DIR}/mu-plugins/vip-go-mu-plugins-built" "${WP_CONTENT_TARGET_DIR}/mu-plugins"
          
          rm -rf "${WP_CONTENT_TARGET_DIR}/plugins"
          ln -s "${WP_CONTENT_SOURCE_DIR}/plugins/pmc-vip-go-plugins" "${WP_CONTENT_TARGET_DIR}/plugins"
          ln -s "${WP_CONTENT_SOURCE_DIR}/plugins/pmc-plugins" "${WP_CONTENT_TARGET_DIR}/plugins/pmc-plugins"
          
          mkdir "${WP_CONTENT_TARGET_DIR}/client-mu-plugins"
          cp "${TMPDIR}/plugin-loader.php" "${WP_CONTENT_TARGET_DIR}/client-mu-plugins"
          
          if [[ -d "${WP_CONTENT_SOURCE_DIR}/themes" ]]; then
            rm -rf "${WP_CONTENT_TARGET_DIR}/themes"
            ln -s "${WP_CONTENT_SOURCE_DIR}/themes" "${WP_CONTENT_TARGET_DIR}/themes"
          fi

      # TODO: we'll need a matrix of PHP versions for this one, and a flag for which versions can fail.
      # TODO: we'll also need a matrix for WP versions, and a flag for which versions can fail.
      - name: Run PHPUnit
        continue-on-error: ${{ matrix.continue_on_error }}
        run: |
          phpunit

      - name: Ensure version-controlled files are not modified during the tests
        run: git diff --exit-code
